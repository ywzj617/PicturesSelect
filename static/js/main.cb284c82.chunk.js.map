{"version":3,"sources":["serviceWorker.js","component/pictures.js","component/PictureSelect.js","view/Page.js","index.js"],"names":["Boolean","window","location","hostname","match","pictures","id","name","url","PictureSelect","getAllCheckedValue","props","value","length","getChecked","some","item","type","checked","this","onChange","checkAll","className","map","key","src","alt","style","textAlign","React","Component","Page","state","checkedArr","setState","changeCheck","find","newArr","filter","console","log","ReactDOM","render","component","path","document","body","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6NAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yDClBOC,EAAW,CACtB,CACEC,GAAI,IACJC,KAAM,MACNC,IAAK,yFAEP,CACEF,GAAI,IACJC,KAAM,MACNC,IAAK,yFAEP,CACEF,GAAI,IACJC,KAAM,MACNC,IAAK,0FCZYC,E,4MACjBC,mBAAqB,WACjB,OAAgC,IAA5B,EAAKC,MAAMC,MAAMC,Q,EAMzBC,WAAa,SAACR,GAEV,OADa,EAAKK,MAAMC,MAAMG,MAAK,SAAAC,GAAI,OAAIA,IAASV,M,uDAK9C,IAAD,OACL,OAAO,6BACH,2BAAOW,KAAK,WAAWC,QAASC,KAAKT,qBAAsBU,SAAUD,KAAKR,MAAMU,WAChF,mDAAUF,KAAKR,MAAMC,MAAMC,OAA3B,sBACA,yBAAKS,UAAU,QAEPH,KAAKR,MAAMN,SAASkB,KAAI,SAACP,GACrB,OAAO,yBAAKM,UAAU,QAAQE,IAAKR,EAAKV,IACpC,2BAAOW,KAAK,WAAWC,QAAS,EAAKJ,WAAWE,EAAKV,IAAKc,SAAU,WAAQ,EAAKT,MAAMS,SAASJ,EAAKV,OACrG,yBAAKmB,IAAKT,EAAKR,IAAKkB,IAAI,KACxB,uBAAGC,MAAO,CAAEC,UAAW,WAAaZ,EAAKV,GAAzC,kB,GAxBeuB,IAAMC,WCE5BC,G,kNAEjBC,MAAQ,CACJC,WAAY,I,EAGhBZ,SAAW,WAC8B,IAAjC,EAAKW,MAAMC,WAAWpB,OACtB,EAAKqB,SAAS,CAAED,WAAY,KAE5B,EAAKC,SAAS,CAAED,WAAY,CAAC,IAAK,IAAK,Q,EAG/CE,YAAc,SAAC7B,GACU,EAAK0B,MAAMC,WAAWG,MAAK,SAAApB,GAAI,OAAIA,IAASV,KAE7D,EAAK4B,UAAS,SAACF,GACX,IAAMK,EAASL,EAAMC,WAAWK,QAAO,SAAAtB,GAAI,OAAIA,IAASV,KAExD,OADAiC,QAAQC,IAAIH,GACL,CAAEJ,WAAYI,MAGzB,EAAKH,UAAS,SAACF,GACX,IAAMK,EAAM,sBAAOL,EAAMC,YAAb,CAAyB3B,IAErC,OADAiC,QAAQC,IAAIH,GACL,CAAEJ,WAAYI,O,uDAO7B,OACI,kBAAC,EAAD,CAAejB,SAAUD,KAAKgB,YAAavB,MAAOO,KAAKa,MAAMC,WAAY5B,SAAUA,EAAUgB,SAAUF,KAAKE,e,GAjCtFQ,IAAMC,YCIxCW,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,UAAWZ,EAAMa,KAAK,OAE/BC,SAASC,MJuHL,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLf,QAAQe,MAAMA,EAAMC,c","file":"static/js/main.cb284c82.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const pictures = [\n  {\n    id: '1',\n    name: 'foo',\n    url: 'https://gw.alipayobjects.com/mdn/rms_d212b7/afts/img/A*LlfeSa8N0WgAAAAAAAAAAABkARQnAQ'\n  },\n  {\n    id: '2',\n    name: 'foo',\n    url: 'https://gw.alipayobjects.com/mdn/rms_d212b7/afts/img/A*LlfeSa8N0WgAAAAAAAAAAABkARQnAQ'\n  },\n  {\n    id: '3',\n    name: 'foo',\n    url: 'https://gw.alipayobjects.com/mdn/rms_d212b7/afts/img/A*LlfeSa8N0WgAAAAAAAAAAABkARQnAQ'\n  },\n];\n","import React from 'react'\n\nexport default class PictureSelect extends React.Component {\n    getAllCheckedValue = () => {\n        if (this.props.value.length === 3) {\n            return true\n        }\n        return false\n    }\n\n    getChecked = (id) => {\n        const flag = this.props.value.some(item => item === id)\n        return flag\n    }\n\n\n    render() {\n        return <div>\n            <input type=\"checkbox\" checked={this.getAllCheckedValue()} onChange={this.props.checkAll} />\n            <span>已选中{this.props.value.length}个文件</span>\n            <div className=\"warp\">\n                {\n                    this.props.pictures.map((item) => {\n                        return <div className=\"check\" key={item.id}>\n                            <input type=\"checkbox\" checked={this.getChecked(item.id)} onChange={() => { this.props.onChange(item.id) }} />\n                            <img src={item.url} alt='' />\n                            <p style={{ textAlign: \"center\" }}>{item.id}.jpg</p>\n                        </div>\n                    })\n                }\n            </div>\n        </div>\n    }\n}","import React from 'react'\nimport { pictures } from '../component/pictures'\nimport PictureSelect from '../component/PictureSelect'\nimport './page.css'\nexport default class Page extends React.Component {\n\n    state = {\n        checkedArr: [],\n    }\n\n    checkAll = () => {\n        if (this.state.checkedArr.length === 3) {\n            this.setState({ checkedArr: [] })\n        } else {\n            this.setState({ checkedArr: ['1', '2', '3'] })\n        }\n    }\n    changeCheck = (id) => {\n        const selectedItem = this.state.checkedArr.find(item => item === id)\n        if (selectedItem) {\n            this.setState((state) => {\n                const newArr = state.checkedArr.filter(item => item !== id)\n                console.log(newArr)\n                return { checkedArr: newArr }\n            })\n        } else {\n            this.setState((state) => {\n                const newArr = [...state.checkedArr, id]\n                console.log(newArr)\n                return { checkedArr: newArr }\n            })\n        }\n    }\n\n\n    render() {\n        return (\n            <PictureSelect onChange={this.changeCheck} value={this.state.checkedArr} pictures={pictures} checkAll={this.checkAll} />\n        )\n    }\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Page from './view/Page';\n\nReactDOM.render(\n  <Router>\n    <Route component={Page} path='/' />\n  </Router>,\n  document.body\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}